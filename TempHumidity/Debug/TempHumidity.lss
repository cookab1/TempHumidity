
TempHumidity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  000004fc  00000590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080023a  0080023a  000005ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001253  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2c  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a3  00000000  00000000  0000275b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d4  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040c  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c0       	rjmp	.+222    	; 0x124 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 34       	cpi	r26, 0x4B	; 75
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0b d1       	rcall	.+534    	; 0x336 <main>
 120:	eb c1       	rjmp	.+982    	; 0x4f8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_17>:
    if(changeCount == 83) {
        //reset();  This is the end
    }       
}

ISR(TIMER1_COMPA_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
       microsec++;
 132:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <microsec>
 136:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <microsec+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <microsec+0x1>
 140:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <microsec>
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <setupTimer>:
	//temperature / 10.0;
	//checkSum;
}

void setupTimer() {
    TCCR1A = 0;    // set TCCR1A register to 0
 152:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    TCCR1B = 0; // set TCCR1B register to 0 
 156:	e1 e8       	ldi	r30, 0x81	; 129
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
    
	// turn on CTC mode:
    TCCR1B |= (1 << WGM12);
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
    
	// enable timer compare interrupt:
    TIMSK1 |= (1 << OCIE1A);
 162:	ef e6       	ldi	r30, 0x6F	; 111
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
    
    // TOP
    OCR2A = 0x0010;    
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // set compare match register to desired timer count:
    OCR1A = 0x0008;   
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 17a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    
    microsec = 0;
 17e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <microsec+0x1>
 182:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <microsec>
 186:	08 95       	ret

00000188 <recieveData>:
		reset();
	}
}

void recieveData() {
    PORTB &= 0;
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <recieveData+0x8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <recieveData+0xe>
 196:	00 00       	nop
    _delay_ms(5);
    PORTB |= (1 << port_mask);
 198:	29 9a       	sbi	0x05, 1	; 5
    DDRB = 0;
 19a:	14 b8       	out	0x04, r1	; 4
    
    //start timer
    setupTimer();
 19c:	da df       	rcall	.-76     	; 0x152 <setupTimer>
    
    sei();
 19e:	78 94       	sei
 1a0:	9f ef       	ldi	r25, 0xFF	; 255
 1a2:	2b e7       	ldi	r18, 0x7B	; 123
 1a4:	82 e9       	ldi	r24, 0x92	; 146
 1a6:	91 50       	subi	r25, 0x01	; 1
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <recieveData+0x1e>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <recieveData+0x28>
 1b0:	00 00       	nop
    //ready to receive the bits
	_delay_ms(3000);
	cli();
 1b2:	f8 94       	cli
 1b4:	08 95       	ret

000001b6 <setupSerial>:
    
    microsec = 0;
}

void setupSerial() {	
	portNum = 0;
 1b6:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <portNum>
	baud = 19200L;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	9b e4       	ldi	r25, 0x4B	; 75
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <baud>
 1c6:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <baud+0x1>
 1ca:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <baud+0x2>
 1ce:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <baud+0x3>
	framingParam = SERIAL_8N1;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <framingParam+0x1>
 1da:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <framingParam>
	
	PSerial_open(portNum, baud, framingParam);
 1de:	26 e0       	ldi	r18, 0x06	; 6
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	5b e4       	ldi	r21, 0x4B	; 75
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	5e c1       	rjmp	.+700    	; 0x4aa <PSerial_open>
 1ee:	08 95       	ret

000001f0 <print>:
}

void print(char *str) {
	print_String(portNum, str);
 1f0:	bc 01       	movw	r22, r24
 1f2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <portNum>
 1f6:	be c0       	rjmp	.+380    	; 0x374 <print_String>
 1f8:	08 95       	ret

000001fa <__vector_9>:
    //ready to receive the bits
	_delay_ms(3000);
	cli();
}

ISR(PCINT0_vect) {
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	0b b6       	in	r0, 0x3b	; 59
 206:	0f 92       	push	r0
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	print("Got into Pin Change Interrupt.");
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	e5 df       	rcall	.-54     	; 0x1f0 <print>
    if(((changeCount % 2) == 1) && changeCount > 1) {
 226:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <changeCount>
 22a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <changeCount+0x1>
 22e:	9c 01       	movw	r18, r24
 230:	21 70       	andi	r18, 0x01	; 1
 232:	30 78       	andi	r19, 0x80	; 128
 234:	33 23       	and	r19, r19
 236:	34 f4       	brge	.+12     	; 0x244 <__vector_9+0x4a>
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	31 09       	sbc	r19, r1
 23c:	2e 6f       	ori	r18, 0xFE	; 254
 23e:	3f 6f       	ori	r19, 0xFF	; 255
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	21 30       	cpi	r18, 0x01	; 1
 246:	31 05       	cpc	r19, r1
 248:	09 f0       	breq	.+2      	; 0x24c <__vector_9+0x52>
 24a:	51 c0       	rjmp	.+162    	; 0x2ee <__vector_9+0xf4>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	91 05       	cpc	r25, r1
 250:	0c f4       	brge	.+2      	; 0x254 <__vector_9+0x5a>
 252:	4d c0       	rjmp	.+154    	; 0x2ee <__vector_9+0xf4>
        if(changeCount < 34) {
 254:	82 32       	cpi	r24, 0x22	; 34
 256:	91 05       	cpc	r25, r1
 258:	bc f4       	brge	.+46     	; 0x288 <__vector_9+0x8e>
            humidity <<= 1;
 25a:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <humidity>
 25e:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <humidity+0x1>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	30 93 3f 02 	sts	0x023F, r19	; 0x80023f <humidity+0x1>
 26a:	20 93 3e 02 	sts	0x023E, r18	; 0x80023e <humidity>
            if(microsec > 45)
 26e:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <microsec>
 272:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <microsec+0x1>
 276:	4e 32       	cpi	r20, 0x2E	; 46
 278:	51 05       	cpc	r21, r1
 27a:	cc f1       	brlt	.+114    	; 0x2ee <__vector_9+0xf4>
                humidity |= 1;
 27c:	21 60       	ori	r18, 0x01	; 1
 27e:	30 93 3f 02 	sts	0x023F, r19	; 0x80023f <humidity+0x1>
 282:	20 93 3e 02 	sts	0x023E, r18	; 0x80023e <humidity>
 286:	33 c0       	rjmp	.+102    	; 0x2ee <__vector_9+0xf4>
        } else if (changeCount < 66) {
 288:	82 34       	cpi	r24, 0x42	; 66
 28a:	91 05       	cpc	r25, r1
 28c:	bc f4       	brge	.+46     	; 0x2bc <__vector_9+0xc2>
            temperature <<= 1;
 28e:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <temperature>
 292:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <temperature+0x1>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <temperature+0x1>
 29e:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <temperature>
            if(microsec > 45)
 2a2:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <microsec>
 2a6:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <microsec+0x1>
 2aa:	4e 32       	cpi	r20, 0x2E	; 46
 2ac:	51 05       	cpc	r21, r1
 2ae:	fc f0       	brlt	.+62     	; 0x2ee <__vector_9+0xf4>
                temperature |= 1;
 2b0:	21 60       	ori	r18, 0x01	; 1
 2b2:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <temperature+0x1>
 2b6:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <temperature>
 2ba:	19 c0       	rjmp	.+50     	; 0x2ee <__vector_9+0xf4>
        } else if (changeCount < 82) {
 2bc:	82 35       	cpi	r24, 0x52	; 82
 2be:	91 05       	cpc	r25, r1
 2c0:	b4 f4       	brge	.+44     	; 0x2ee <__vector_9+0xf4>
            checkSum <<= 1;
 2c2:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__data_end>
 2c6:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__data_end+0x1>
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <__data_end+0x1>
 2d2:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <__data_end>
            if(microsec > 45)
 2d6:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <microsec>
 2da:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <microsec+0x1>
 2de:	4e 32       	cpi	r20, 0x2E	; 46
 2e0:	51 05       	cpc	r21, r1
 2e2:	2c f0       	brlt	.+10     	; 0x2ee <__vector_9+0xf4>
                checkSum |= 1;
 2e4:	21 60       	ori	r18, 0x01	; 1
 2e6:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <__data_end+0x1>
 2ea:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <__data_end>
        } 
    }
    changeCount++;
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <changeCount+0x1>
 2f4:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <changeCount>
    if(changeCount == 83) {
        //reset();  This is the end
    }       
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0b be       	out	0x3b, r0	; 59
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <reset>:
ISR(TIMER1_COMPA_vect) {
       microsec++;
}

void reset() {
	print("Reset.");
 31e:	87 e2       	ldi	r24, 0x27	; 39
 320:	92 e0       	ldi	r25, 0x02	; 2
 322:	66 cf       	rjmp	.-308    	; 0x1f0 <print>
 324:	08 95       	ret

00000326 <processData>:
    int checkSum = 0;
}

//This method needs to calculate the humidity and temperature and print to the terminal
void processData() {	
	print("Humidity: " + humidity);
 326:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <humidity>
 32a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <humidity+0x1>
 32e:	82 5d       	subi	r24, 0xD2	; 210
 330:	9d 4f       	sbci	r25, 0xFD	; 253
 332:	5e cf       	rjmp	.-324    	; 0x1f0 <print>
 334:	08 95       	ret

00000336 <main>:
void processData();
void print();

int main(void)
{
	PCICR = 1; //enable group interrupts on PORTB
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
	PCMSK0 |= (1 << port_mask);
 33c:	eb e6       	ldi	r30, 0x6B	; 107
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	82 60       	ori	r24, 0x02	; 2
 344:	80 83       	st	Z, r24
	setupSerial();
 346:	37 df       	rcall	.-402    	; 0x1b6 <setupSerial>
        cli();
        //We're going to need... 
        //an interrupt handler
        //and timer integration
		
		DDRB = (1 << port_mask);
 348:	c2 e0       	ldi	r28, 0x02	; 2
	PCMSK0 |= (1 << port_mask);
	setupSerial();
	
    while (1) 
    {
        cli();
 34a:	f8 94       	cli
        //We're going to need... 
        //an interrupt handler
        //and timer integration
		
		DDRB = (1 << port_mask);
 34c:	c4 b9       	out	0x04, r28	; 4
		PORTB |= (1 << port_mask);
		
        recieveData();
 34e:	29 9a       	sbi	0x05, 1	; 5
		processData();
 350:	1b df       	rcall	.-458    	; 0x188 <recieveData>
 352:	e9 df       	rcall	.-46     	; 0x326 <processData>
		reset();
 354:	e4 df       	rcall	.-56     	; 0x31e <reset>
 356:	f9 cf       	rjmp	.-14     	; 0x34a <main+0x14>

00000358 <PSerial_write>:
 358:	e8 2f       	mov	r30, r24
	}
	c = serial_port[port]->udr; //c = read in the data;
	return c;
}
void PSerial_write(unsigned char port, char data) {
	while(!(serial_port[port]->ucsra & (1 << 5))) {
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	e0 50       	subi	r30, 0x00	; 0
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	01 90       	ld	r0, Z+
 366:	f0 81       	ld	r31, Z
 368:	e0 2d       	mov	r30, r0
 36a:	80 81       	ld	r24, Z
 36c:	85 ff       	sbrs	r24, 5
 36e:	fd cf       	rjmp	.-6      	; 0x36a <PSerial_write+0x12>
	}
	serial_port[port]->udr = data; //write in the data = data;
 370:	66 83       	std	Z+6, r22	; 0x06
 372:	08 95       	ret

00000374 <print_String>:
}
void print_String(unsigned char port, char *str) {
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	f8 2e       	mov	r15, r24
		int i;
		int length = strlen(str);
 380:	fb 01       	movw	r30, r22
 382:	01 90       	ld	r0, Z+
 384:	00 20       	and	r0, r0
 386:	e9 f7       	brne	.-6      	; 0x382 <print_String+0xe>
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	e6 1b       	sub	r30, r22
 38c:	f7 0b       	sbc	r31, r23
		for(i = 0; i < length; i++) {
 38e:	1e 16       	cp	r1, r30
 390:	1f 06       	cpc	r1, r31
 392:	54 f4       	brge	.+20     	; 0x3a8 <print_String+0x34>
 394:	eb 01       	movw	r28, r22
 396:	8b 01       	movw	r16, r22
 398:	0e 0f       	add	r16, r30
 39a:	1f 1f       	adc	r17, r31
			PSerial_write(port, str[i]);
 39c:	69 91       	ld	r22, Y+
 39e:	8f 2d       	mov	r24, r15
 3a0:	db df       	rcall	.-74     	; 0x358 <PSerial_write>
	serial_port[port]->udr = data; //write in the data = data;
}
void print_String(unsigned char port, char *str) {
		int i;
		int length = strlen(str);
		for(i = 0; i < length; i++) {
 3a2:	c0 17       	cp	r28, r16
 3a4:	d1 07       	cpc	r29, r17
 3a6:	d1 f7       	brne	.-12     	; 0x39c <print_String+0x28>
			PSerial_write(port, str[i]);
		}
		PSerial_write(port, '\n');
 3a8:	6a e0       	ldi	r22, 0x0A	; 10
 3aa:	8f 2d       	mov	r24, r15
 3ac:	d5 df       	rcall	.-86     	; 0x358 <PSerial_write>
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	08 95       	ret

000003ba <setUBRR>:
int setUBRR(long baud) {
	switch(baud){
 3ba:	60 38       	cpi	r22, 0x80	; 128
 3bc:	20 e7       	ldi	r18, 0x70	; 112
 3be:	72 07       	cpc	r23, r18
 3c0:	81 05       	cpc	r24, r1
 3c2:	91 05       	cpc	r25, r1
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <setUBRR+0xe>
 3c6:	56 c0       	rjmp	.+172    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 3c8:	0c f5       	brge	.+66     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ca:	60 38       	cpi	r22, 0x80	; 128
 3cc:	25 e2       	ldi	r18, 0x25	; 37
 3ce:	72 07       	cpc	r23, r18
 3d0:	81 05       	cpc	r24, r1
 3d2:	91 05       	cpc	r25, r1
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <setUBRR+0x1e>
 3d6:	45 c0       	rjmp	.+138    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 3d8:	6c f4       	brge	.+26     	; 0x3f4 <setUBRR+0x3a>
 3da:	60 36       	cpi	r22, 0x60	; 96
 3dc:	29 e0       	ldi	r18, 0x09	; 9
 3de:	72 07       	cpc	r23, r18
 3e0:	81 05       	cpc	r24, r1
 3e2:	91 05       	cpc	r25, r1
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <setUBRR+0x2e>
 3e6:	5e c0       	rjmp	.+188    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3e8:	60 3c       	cpi	r22, 0xC0	; 192
 3ea:	72 41       	sbci	r23, 0x12	; 18
 3ec:	81 05       	cpc	r24, r1
 3ee:	91 05       	cpc	r25, r1
 3f0:	a9 f1       	breq	.+106    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 3f2:	55 c0       	rjmp	.+170    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 3f4:	60 34       	cpi	r22, 0x40	; 64
 3f6:	28 e3       	ldi	r18, 0x38	; 56
 3f8:	72 07       	cpc	r23, r18
 3fa:	81 05       	cpc	r24, r1
 3fc:	91 05       	cpc	r25, r1
 3fe:	a1 f1       	breq	.+104    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 400:	61 15       	cp	r22, r1
 402:	7b 44       	sbci	r23, 0x4B	; 75
 404:	81 05       	cpc	r24, r1
 406:	91 05       	cpc	r25, r1
 408:	91 f1       	breq	.+100    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 40a:	49 c0       	rjmp	.+146    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 40c:	61 15       	cp	r22, r1
 40e:	2c e2       	ldi	r18, 0x2C	; 44
 410:	72 07       	cpc	r23, r18
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	82 07       	cpc	r24, r18
 416:	91 05       	cpc	r25, r1
 418:	b1 f1       	breq	.+108    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 41a:	64 f4       	brge	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 41c:	61 15       	cp	r22, r1
 41e:	26 e9       	ldi	r18, 0x96	; 150
 420:	72 07       	cpc	r23, r18
 422:	81 05       	cpc	r24, r1
 424:	91 05       	cpc	r25, r1
 426:	49 f1       	breq	.+82     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 428:	61 15       	cp	r22, r1
 42a:	71 4e       	sbci	r23, 0xE1	; 225
 42c:	81 05       	cpc	r24, r1
 42e:	91 05       	cpc	r25, r1
 430:	39 f1       	breq	.+78     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 432:	35 c0       	rjmp	.+106    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 434:	61 15       	cp	r22, r1
 436:	24 e8       	ldi	r18, 0x84	; 132
 438:	72 07       	cpc	r23, r18
 43a:	23 e0       	ldi	r18, 0x03	; 3
 43c:	82 07       	cpc	r24, r18
 43e:	91 05       	cpc	r25, r1
 440:	41 f1       	breq	.+80     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 442:	60 39       	cpi	r22, 0x90	; 144
 444:	20 ed       	ldi	r18, 0xD0	; 208
 446:	72 07       	cpc	r23, r18
 448:	23 e0       	ldi	r18, 0x03	; 3
 44a:	82 07       	cpc	r24, r18
 44c:	91 05       	cpc	r25, r1
 44e:	21 f1       	breq	.+72     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 450:	61 15       	cp	r22, r1
 452:	72 4c       	sbci	r23, 0xC2	; 194
 454:	81 40       	sbci	r24, 0x01	; 1
 456:	91 05       	cpc	r25, r1
 458:	11 f5       	brne	.+68     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 45a:	18 c0       	rjmp	.+48     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		case 2400:
			return 416;
			break;
		case 4800:
			return 207;
 45c:	8f ec       	ldi	r24, 0xCF	; 207
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	08 95       	ret
			break;
		case 9600:
			return 103;
 462:	87 e6       	ldi	r24, 0x67	; 103
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	08 95       	ret
			break;
		case 14400:
			return 68;
 468:	84 e4       	ldi	r24, 0x44	; 68
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	08 95       	ret
			break;
		case 19200:
			return 51;
 46e:	83 e3       	ldi	r24, 0x33	; 51
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	08 95       	ret
			break;
		case 28800:
			return 34;
 474:	82 e2       	ldi	r24, 0x22	; 34
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	08 95       	ret
			break;
		case 38400:
			return 25;
 47a:	89 e1       	ldi	r24, 0x19	; 25
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	08 95       	ret
			break;
		case 57600:
			return 16;
 480:	80 e1       	ldi	r24, 0x10	; 16
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	08 95       	ret
			break;
		case 76800:
			return 12;
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	08 95       	ret
			break;
		case 115200:
			return 8;
 48c:	88 e0       	ldi	r24, 0x08	; 8
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	08 95       	ret
			break;
		case 230400:
			return 3;
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 95       	ret
			break;
		case 250000:
			return 3;
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	08 95       	ret
			break;
		default:
			return -1;
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	9f ef       	ldi	r25, 0xFF	; 255
 4a2:	08 95       	ret
		PSerial_write(port, '\n');
}
int setUBRR(long baud) {
	switch(baud){
		case 2400:
			return 416;
 4a4:	80 ea       	ldi	r24, 0xA0	; 160
 4a6:	91 e0       	ldi	r25, 0x01	; 1
			return 3;
			break;
		default:
			return -1;
	}
}
 4a8:	08 95       	ret

000004aa <PSerial_open>:
};

static unsigned char port;
static long baudrate;

void PSerial_open(unsigned char portNum, long speed, int framing) {
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	12 2f       	mov	r17, r18
	port = portNum;
	baudrate = speed;
	serial_port[port]->ubrr = setUBRR(baudrate);
 4b6:	c8 2f       	mov	r28, r24
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
 4ba:	cc 0f       	add	r28, r28
 4bc:	dd 1f       	adc	r29, r29
 4be:	c0 50       	subi	r28, 0x00	; 0
 4c0:	de 4f       	sbci	r29, 0xFE	; 254
 4c2:	e8 80       	ld	r14, Y
 4c4:	f9 80       	ldd	r15, Y+1	; 0x01
 4c6:	cb 01       	movw	r24, r22
 4c8:	ba 01       	movw	r22, r20
 4ca:	77 df       	rcall	.-274    	; 0x3ba <setUBRR>
 4cc:	f7 01       	movw	r30, r14
 4ce:	95 83       	std	Z+5, r25	; 0x05
 4d0:	84 83       	std	Z+4, r24	; 0x04
	serial_port[port]->ucsrc = framing;
 4d2:	e8 81       	ld	r30, Y
 4d4:	f9 81       	ldd	r31, Y+1	; 0x01
 4d6:	12 83       	std	Z+2, r17	; 0x02
	//enable the receiving
	//UCSRnB bit 4
	serial_port[port]->ucsrb |= (1 << 4);
 4d8:	e8 81       	ld	r30, Y
 4da:	f9 81       	ldd	r31, Y+1	; 0x01
 4dc:	81 81       	ldd	r24, Z+1	; 0x01
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	81 83       	std	Z+1, r24	; 0x01
	//enable the transmitting
	//UCSRnB bit 3
	serial_port[port]->ucsrb |= (1 << 3);
 4e2:	e8 81       	ld	r30, Y
 4e4:	f9 81       	ldd	r31, Y+1	; 0x01
 4e6:	81 81       	ldd	r24, Z+1	; 0x01
 4e8:	88 60       	ori	r24, 0x08	; 8
 4ea:	81 83       	std	Z+1, r24	; 0x01
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
