
TempHumidity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000b5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800214  00800214  00000c04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e84  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e4  00000000  00000000  00002e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bc  00000000  00000000  00003df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000042b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7f c0       	rjmp	.+254    	; 0x124 <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	53 c1       	rjmp	.+678    	; 0x2ec <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e5       	ldi	r30, 0x5C	; 92
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	60 d1       	rcall	.+704    	; 0x3e0 <main>
 120:	1b c5       	rjmp	.+2614   	; 0xb58 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_9>:
    //ready to receive the bits
	_delay_ms(1000);
	cli();
}

ISR(PCINT0_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	//char temp[3];
	//sprintf(temp, "%d", microsec);
	//print(temp);
    if(((changeCount % 2) == 1) && changeCount > 1) {
 13a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <changeCount>
 13e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <changeCount+0x1>
 142:	9c 01       	movw	r18, r24
 144:	21 70       	andi	r18, 0x01	; 1
 146:	30 78       	andi	r19, 0x80	; 128
 148:	33 23       	and	r19, r19
 14a:	34 f4       	brge	.+12     	; 0x158 <__vector_9+0x34>
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	31 09       	sbc	r19, r1
 150:	2e 6f       	ori	r18, 0xFE	; 254
 152:	3f 6f       	ori	r19, 0xFF	; 255
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	21 30       	cpi	r18, 0x01	; 1
 15a:	31 05       	cpc	r19, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <__vector_9+0x3c>
 15e:	51 c0       	rjmp	.+162    	; 0x202 <__vector_9+0xde>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	91 05       	cpc	r25, r1
 164:	0c f4       	brge	.+2      	; 0x168 <__vector_9+0x44>
 166:	4d c0       	rjmp	.+154    	; 0x202 <__vector_9+0xde>
        if(changeCount < 34) {
 168:	82 32       	cpi	r24, 0x22	; 34
 16a:	91 05       	cpc	r25, r1
 16c:	bc f4       	brge	.+46     	; 0x19c <__vector_9+0x78>
            humidity <<= 1;
 16e:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <humidity>
 172:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <humidity+0x1>
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <humidity+0x1>
 17e:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <humidity>
            if(microsec > 45) {
 182:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <microsec>
 186:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <microsec+0x1>
 18a:	4e 32       	cpi	r20, 0x2E	; 46
 18c:	51 05       	cpc	r21, r1
 18e:	cc f1       	brlt	.+114    	; 0x202 <__vector_9+0xde>
                humidity |= 1;
 190:	21 60       	ori	r18, 0x01	; 1
 192:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <humidity+0x1>
 196:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <humidity>
 19a:	33 c0       	rjmp	.+102    	; 0x202 <__vector_9+0xde>
				}
        } else if (changeCount < 66) {
 19c:	82 34       	cpi	r24, 0x42	; 66
 19e:	91 05       	cpc	r25, r1
 1a0:	bc f4       	brge	.+46     	; 0x1d0 <__vector_9+0xac>
            temperature <<= 1;
 1a2:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <temperature>
 1a6:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <temperature+0x1>
 1aa:	22 0f       	add	r18, r18
 1ac:	33 1f       	adc	r19, r19
 1ae:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <temperature+0x1>
 1b2:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <temperature>
            if(microsec > 45)
 1b6:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <microsec>
 1ba:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <microsec+0x1>
 1be:	4e 32       	cpi	r20, 0x2E	; 46
 1c0:	51 05       	cpc	r21, r1
 1c2:	fc f0       	brlt	.+62     	; 0x202 <__vector_9+0xde>
                temperature |= 1;
 1c4:	21 60       	ori	r18, 0x01	; 1
 1c6:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <temperature+0x1>
 1ca:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <temperature>
 1ce:	19 c0       	rjmp	.+50     	; 0x202 <__vector_9+0xde>
        } else if (changeCount < 82) {
 1d0:	82 35       	cpi	r24, 0x52	; 82
 1d2:	91 05       	cpc	r25, r1
 1d4:	b4 f4       	brge	.+44     	; 0x202 <__vector_9+0xde>
            checkSum <<= 1;
 1d6:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__data_end>
 1da:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__data_end+0x1>
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__data_end+0x1>
 1e6:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__data_end>
            if(microsec > 45)
 1ea:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <microsec>
 1ee:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <microsec+0x1>
 1f2:	4e 32       	cpi	r20, 0x2E	; 46
 1f4:	51 05       	cpc	r21, r1
 1f6:	2c f0       	brlt	.+10     	; 0x202 <__vector_9+0xde>
                checkSum |= 1;
 1f8:	21 60       	ori	r18, 0x01	; 1
 1fa:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <__data_end+0x1>
 1fe:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <__data_end>
        } 
    }
    changeCount++;
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <changeCount+0x1>
 208:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <changeCount>
    if(changeCount == 83) {
        //reset();  This is the end
    }       
}
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <reset>:
       microsec++;
}

void reset() {
	//print(reset);
    changeCount = 0;
 222:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <changeCount+0x1>
 226:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <changeCount>

    humidity = 0;
 22a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <humidity+0x1>
 22e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <humidity>
    temperature = 0;
 232:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <temperature+0x1>
 236:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <temperature>
    checkSum = 0;
 23a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
 23e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
 242:	08 95       	ret

00000244 <setupTimer>:
	sprintf(temp, "%d", checkSum);
	print(temp);
}

void setupTimer() {
    TCCR1A = 0;    // set TCCR1A register to 0
 244:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    TCCR1B = 0; // set TCCR1B register to 0 
 248:	e1 e8       	ldi	r30, 0x81	; 129
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	10 82       	st	Z, r1
    
	// turn on CTC mode:
    TCCR1B |= (1 << WGM12);
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24
    
	// enable timer compare interrupt:
    TIMSK1 |= (1 << OCIE1A);
 254:	ef e6       	ldi	r30, 0x6F	; 111
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	80 83       	st	Z, r24
    
    // TOP
    OCR2A = 0x0010;    
 25e:	80 e1       	ldi	r24, 0x10	; 16
 260:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    // set compare match register to desired timer count:
    OCR1A = 0x0008;   
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 26c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    
    microsec = 0;
 270:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <microsec+0x1>
 274:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <microsec>
 278:	08 95       	ret

0000027a <recieveData>:
		reset();
	}
}

void recieveData() {
    PORTB &= 0;
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	8f e1       	ldi	r24, 0x1F	; 31
 280:	9e e4       	ldi	r25, 0x4E	; 78
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <recieveData+0x8>
 286:	00 c0       	rjmp	.+0      	; 0x288 <recieveData+0xe>
 288:	00 00       	nop
    _delay_ms(5);
    PORTB |= (1 << port_mask);
 28a:	29 9a       	sbi	0x05, 1	; 5
    DDRB = 0;
 28c:	14 b8       	out	0x04, r1	; 4
    
    //start timer
    setupTimer();
 28e:	da df       	rcall	.-76     	; 0x244 <setupTimer>
    
    sei();
 290:	78 94       	sei
 292:	9f ef       	ldi	r25, 0xFF	; 255
 294:	23 ed       	ldi	r18, 0xD3	; 211
 296:	80 e3       	ldi	r24, 0x30	; 48
 298:	91 50       	subi	r25, 0x01	; 1
 29a:	20 40       	sbci	r18, 0x00	; 0
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <recieveData+0x1e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <recieveData+0x28>
 2a2:	00 00       	nop
    //ready to receive the bits
	_delay_ms(1000);
	cli();
 2a4:	f8 94       	cli
 2a6:	08 95       	ret

000002a8 <setupSerial>:
    
    microsec = 0;
}

void setupSerial() {	
	portNum = 0;
 2a8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <portNum>
	baud = 19200L;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	9b e4       	ldi	r25, 0x4B	; 75
 2b0:	a0 e0       	ldi	r26, 0x00	; 0
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <baud>
 2b8:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <baud+0x1>
 2bc:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <baud+0x2>
 2c0:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <baud+0x3>
	framingParam = SERIAL_8N1;
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <framingParam+0x1>
 2cc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <framingParam>
	
	PSerial_open(portNum, baud, framingParam);
 2d0:	26 e0       	ldi	r18, 0x06	; 6
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	5b e4       	ldi	r21, 0x4B	; 75
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	3a c1       	rjmp	.+628    	; 0x554 <PSerial_open>
 2e0:	08 95       	ret

000002e2 <print>:
}

void print(char *str) {
	print_String(portNum, str);
 2e2:	bc 01       	movw	r22, r24
 2e4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <portNum>
 2e8:	9a c0       	rjmp	.+308    	; 0x41e <print_String>
 2ea:	08 95       	ret

000002ec <__vector_17>:
    if(changeCount == 83) {
        //reset();  This is the end
    }       
}

ISR(TIMER1_COMPA_vect) {
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	print("gets in.");
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	e5 df       	rcall	.-54     	; 0x2e2 <print>
       microsec++;
 318:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <microsec>
 31c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <microsec+0x1>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <microsec+0x1>
 326:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <microsec>
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0b be       	out	0x3b, r0	; 59
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <processData>:
    temperature = 0;
    checkSum = 0;
}

//This method needs to calculate the humidity and temperature and print to the terminal
void processData() {
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	00 d0       	rcall	.+0      	; 0x35e <processData+0xe>
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	char temp[3];
	sprintf(temp, "%d", humidity);
 362:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <humidity+0x1>
 366:	8f 93       	push	r24
 368:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <humidity>
 36c:	8f 93       	push	r24
 36e:	0f 2e       	mov	r0, r31
 370:	f1 e1       	ldi	r31, 0x11	; 17
 372:	ef 2e       	mov	r14, r31
 374:	f2 e0       	ldi	r31, 0x02	; 2
 376:	ff 2e       	mov	r15, r31
 378:	f0 2d       	mov	r31, r0
 37a:	ff 92       	push	r15
 37c:	ef 92       	push	r14
 37e:	8e 01       	movw	r16, r28
 380:	0f 5f       	subi	r16, 0xFF	; 255
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	1f 93       	push	r17
 386:	0f 93       	push	r16
 388:	0c d1       	rcall	.+536    	; 0x5a2 <sprintf>
	print(temp);
 38a:	c8 01       	movw	r24, r16
 38c:	aa df       	rcall	.-172    	; 0x2e2 <print>
	sprintf(temp, "%d", temperature);
 38e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <temperature+0x1>
 392:	8f 93       	push	r24
 394:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <temperature>
 398:	8f 93       	push	r24
 39a:	ff 92       	push	r15
 39c:	ef 92       	push	r14
 39e:	1f 93       	push	r17
 3a0:	0f 93       	push	r16
	print(temp);
 3a2:	ff d0       	rcall	.+510    	; 0x5a2 <sprintf>
 3a4:	c8 01       	movw	r24, r16
 3a6:	9d df       	rcall	.-198    	; 0x2e2 <print>
	
	sprintf(temp, "%d", checkSum);
 3a8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <__data_end+0x1>
 3ac:	8f 93       	push	r24
 3ae:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 3b2:	8f 93       	push	r24
 3b4:	ff 92       	push	r15
 3b6:	ef 92       	push	r14
 3b8:	1f 93       	push	r17
 3ba:	0f 93       	push	r16
	print(temp);
 3bc:	f2 d0       	rcall	.+484    	; 0x5a2 <sprintf>
 3be:	c8 01       	movw	r24, r16
 3c0:	90 df       	rcall	.-224    	; 0x2e2 <print>
}
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	08 95       	ret

000003e0 <main>:
char * toString(int);
char * toString_rec(int, int, char *);

int main(void)
{
	PCICR = 1; //enable group interrupts on PORTB
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
	PCMSK0 |= (1 << port_mask);
 3e6:	eb e6       	ldi	r30, 0x6B	; 107
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	80 83       	st	Z, r24
	setupSerial();
 3f0:	5b df       	rcall	.-330    	; 0x2a8 <setupSerial>
        cli();
        //We're going to need... 
        //an interrupt handler
        //and timer integration
		
		DDRB = (1 << port_mask);
 3f2:	c2 e0       	ldi	r28, 0x02	; 2
	PCMSK0 |= (1 << port_mask);
	setupSerial();
	
    while (1) 
    {
        cli();
 3f4:	f8 94       	cli
        //We're going to need... 
        //an interrupt handler
        //and timer integration
		
		DDRB = (1 << port_mask);
 3f6:	c4 b9       	out	0x04, r28	; 4
		PORTB |= (1 << port_mask);
		
        recieveData();
 3f8:	29 9a       	sbi	0x05, 1	; 5
		processData();
 3fa:	3f df       	rcall	.-386    	; 0x27a <recieveData>
 3fc:	a9 df       	rcall	.-174    	; 0x350 <processData>
		reset();
 3fe:	11 df       	rcall	.-478    	; 0x222 <reset>
 400:	f9 cf       	rjmp	.-14     	; 0x3f4 <main+0x14>

00000402 <PSerial_write>:
 402:	e8 2f       	mov	r30, r24
	}
	c = serial_port[port]->udr; //c = read in the data;
	return c;
}
void PSerial_write(unsigned char port, char data) {
	while(!(serial_port[port]->ucsra & (1 << 5))) {
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	e0 50       	subi	r30, 0x00	; 0
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	01 90       	ld	r0, Z+
 410:	f0 81       	ld	r31, Z
 412:	e0 2d       	mov	r30, r0
 414:	80 81       	ld	r24, Z
 416:	85 ff       	sbrs	r24, 5
 418:	fd cf       	rjmp	.-6      	; 0x414 <PSerial_write+0x12>
	}
	serial_port[port]->udr = data; //write in the data = data;
 41a:	66 83       	std	Z+6, r22	; 0x06
 41c:	08 95       	ret

0000041e <print_String>:
}
void print_String(unsigned char port, char *str) {
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	f8 2e       	mov	r15, r24
		int i;
		int length = strlen(str);
 42a:	fb 01       	movw	r30, r22
 42c:	01 90       	ld	r0, Z+
 42e:	00 20       	and	r0, r0
 430:	e9 f7       	brne	.-6      	; 0x42c <print_String+0xe>
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	e6 1b       	sub	r30, r22
 436:	f7 0b       	sbc	r31, r23
		for(i = 0; i < length; i++) {
 438:	1e 16       	cp	r1, r30
 43a:	1f 06       	cpc	r1, r31
 43c:	54 f4       	brge	.+20     	; 0x452 <print_String+0x34>
 43e:	eb 01       	movw	r28, r22
 440:	8b 01       	movw	r16, r22
 442:	0e 0f       	add	r16, r30
 444:	1f 1f       	adc	r17, r31
			PSerial_write(port, str[i]);
 446:	69 91       	ld	r22, Y+
 448:	8f 2d       	mov	r24, r15
 44a:	db df       	rcall	.-74     	; 0x402 <PSerial_write>
	serial_port[port]->udr = data; //write in the data = data;
}
void print_String(unsigned char port, char *str) {
		int i;
		int length = strlen(str);
		for(i = 0; i < length; i++) {
 44c:	c0 17       	cp	r28, r16
 44e:	d1 07       	cpc	r29, r17
 450:	d1 f7       	brne	.-12     	; 0x446 <print_String+0x28>
			PSerial_write(port, str[i]);
		}
		PSerial_write(port, '\n');
 452:	6a e0       	ldi	r22, 0x0A	; 10
 454:	8f 2d       	mov	r24, r15
 456:	d5 df       	rcall	.-86     	; 0x402 <PSerial_write>
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	08 95       	ret

00000464 <setUBRR>:
int setUBRR(long baud) {
	switch(baud){
 464:	60 38       	cpi	r22, 0x80	; 128
 466:	20 e7       	ldi	r18, 0x70	; 112
 468:	72 07       	cpc	r23, r18
 46a:	81 05       	cpc	r24, r1
 46c:	91 05       	cpc	r25, r1
 46e:	09 f4       	brne	.+2      	; 0x472 <setUBRR+0xe>
 470:	56 c0       	rjmp	.+172    	; 0x51e <setUBRR+0xba>
 472:	0c f5       	brge	.+66     	; 0x4b6 <setUBRR+0x52>
 474:	60 38       	cpi	r22, 0x80	; 128
 476:	25 e2       	ldi	r18, 0x25	; 37
 478:	72 07       	cpc	r23, r18
 47a:	81 05       	cpc	r24, r1
 47c:	91 05       	cpc	r25, r1
 47e:	09 f4       	brne	.+2      	; 0x482 <setUBRR+0x1e>
 480:	45 c0       	rjmp	.+138    	; 0x50c <setUBRR+0xa8>
 482:	6c f4       	brge	.+26     	; 0x49e <setUBRR+0x3a>
 484:	60 36       	cpi	r22, 0x60	; 96
 486:	29 e0       	ldi	r18, 0x09	; 9
 488:	72 07       	cpc	r23, r18
 48a:	81 05       	cpc	r24, r1
 48c:	91 05       	cpc	r25, r1
 48e:	09 f4       	brne	.+2      	; 0x492 <setUBRR+0x2e>
 490:	5e c0       	rjmp	.+188    	; 0x54e <setUBRR+0xea>
 492:	60 3c       	cpi	r22, 0xC0	; 192
 494:	72 41       	sbci	r23, 0x12	; 18
 496:	81 05       	cpc	r24, r1
 498:	91 05       	cpc	r25, r1
 49a:	a9 f1       	breq	.+106    	; 0x506 <setUBRR+0xa2>
 49c:	55 c0       	rjmp	.+170    	; 0x548 <setUBRR+0xe4>
 49e:	60 34       	cpi	r22, 0x40	; 64
 4a0:	28 e3       	ldi	r18, 0x38	; 56
 4a2:	72 07       	cpc	r23, r18
 4a4:	81 05       	cpc	r24, r1
 4a6:	91 05       	cpc	r25, r1
 4a8:	a1 f1       	breq	.+104    	; 0x512 <setUBRR+0xae>
 4aa:	61 15       	cp	r22, r1
 4ac:	7b 44       	sbci	r23, 0x4B	; 75
 4ae:	81 05       	cpc	r24, r1
 4b0:	91 05       	cpc	r25, r1
 4b2:	91 f1       	breq	.+100    	; 0x518 <setUBRR+0xb4>
 4b4:	49 c0       	rjmp	.+146    	; 0x548 <setUBRR+0xe4>
 4b6:	61 15       	cp	r22, r1
 4b8:	2c e2       	ldi	r18, 0x2C	; 44
 4ba:	72 07       	cpc	r23, r18
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	82 07       	cpc	r24, r18
 4c0:	91 05       	cpc	r25, r1
 4c2:	b1 f1       	breq	.+108    	; 0x530 <setUBRR+0xcc>
 4c4:	64 f4       	brge	.+24     	; 0x4de <setUBRR+0x7a>
 4c6:	61 15       	cp	r22, r1
 4c8:	26 e9       	ldi	r18, 0x96	; 150
 4ca:	72 07       	cpc	r23, r18
 4cc:	81 05       	cpc	r24, r1
 4ce:	91 05       	cpc	r25, r1
 4d0:	49 f1       	breq	.+82     	; 0x524 <setUBRR+0xc0>
 4d2:	61 15       	cp	r22, r1
 4d4:	71 4e       	sbci	r23, 0xE1	; 225
 4d6:	81 05       	cpc	r24, r1
 4d8:	91 05       	cpc	r25, r1
 4da:	39 f1       	breq	.+78     	; 0x52a <setUBRR+0xc6>
 4dc:	35 c0       	rjmp	.+106    	; 0x548 <setUBRR+0xe4>
 4de:	61 15       	cp	r22, r1
 4e0:	24 e8       	ldi	r18, 0x84	; 132
 4e2:	72 07       	cpc	r23, r18
 4e4:	23 e0       	ldi	r18, 0x03	; 3
 4e6:	82 07       	cpc	r24, r18
 4e8:	91 05       	cpc	r25, r1
 4ea:	41 f1       	breq	.+80     	; 0x53c <setUBRR+0xd8>
 4ec:	60 39       	cpi	r22, 0x90	; 144
 4ee:	20 ed       	ldi	r18, 0xD0	; 208
 4f0:	72 07       	cpc	r23, r18
 4f2:	23 e0       	ldi	r18, 0x03	; 3
 4f4:	82 07       	cpc	r24, r18
 4f6:	91 05       	cpc	r25, r1
 4f8:	21 f1       	breq	.+72     	; 0x542 <setUBRR+0xde>
 4fa:	61 15       	cp	r22, r1
 4fc:	72 4c       	sbci	r23, 0xC2	; 194
 4fe:	81 40       	sbci	r24, 0x01	; 1
 500:	91 05       	cpc	r25, r1
 502:	11 f5       	brne	.+68     	; 0x548 <setUBRR+0xe4>
 504:	18 c0       	rjmp	.+48     	; 0x536 <setUBRR+0xd2>
		case 2400:
			return 416;
			break;
		case 4800:
			return 207;
 506:	8f ec       	ldi	r24, 0xCF	; 207
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	08 95       	ret
			break;
		case 9600:
			return 103;
 50c:	87 e6       	ldi	r24, 0x67	; 103
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	08 95       	ret
			break;
		case 14400:
			return 68;
 512:	84 e4       	ldi	r24, 0x44	; 68
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	08 95       	ret
			break;
		case 19200:
			return 51;
 518:	83 e3       	ldi	r24, 0x33	; 51
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	08 95       	ret
			break;
		case 28800:
			return 34;
 51e:	82 e2       	ldi	r24, 0x22	; 34
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	08 95       	ret
			break;
		case 38400:
			return 25;
 524:	89 e1       	ldi	r24, 0x19	; 25
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	08 95       	ret
			break;
		case 57600:
			return 16;
 52a:	80 e1       	ldi	r24, 0x10	; 16
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	08 95       	ret
			break;
		case 76800:
			return 12;
 530:	8c e0       	ldi	r24, 0x0C	; 12
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	08 95       	ret
			break;
		case 115200:
			return 8;
 536:	88 e0       	ldi	r24, 0x08	; 8
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	08 95       	ret
			break;
		case 230400:
			return 3;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	08 95       	ret
			break;
		case 250000:
			return 3;
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	08 95       	ret
			break;
		default:
			return -1;
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	08 95       	ret
		PSerial_write(port, '\n');
}
int setUBRR(long baud) {
	switch(baud){
		case 2400:
			return 416;
 54e:	80 ea       	ldi	r24, 0xA0	; 160
 550:	91 e0       	ldi	r25, 0x01	; 1
			return 3;
			break;
		default:
			return -1;
	}
}
 552:	08 95       	ret

00000554 <PSerial_open>:
};

static unsigned char port;
static long baudrate;

void PSerial_open(unsigned char portNum, long speed, int framing) {
 554:	ef 92       	push	r14
 556:	ff 92       	push	r15
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	12 2f       	mov	r17, r18
	port = portNum;
	baudrate = speed;
	serial_port[port]->ubrr = setUBRR(baudrate);
 560:	c8 2f       	mov	r28, r24
 562:	d0 e0       	ldi	r29, 0x00	; 0
 564:	cc 0f       	add	r28, r28
 566:	dd 1f       	adc	r29, r29
 568:	c0 50       	subi	r28, 0x00	; 0
 56a:	de 4f       	sbci	r29, 0xFE	; 254
 56c:	e8 80       	ld	r14, Y
 56e:	f9 80       	ldd	r15, Y+1	; 0x01
 570:	cb 01       	movw	r24, r22
 572:	ba 01       	movw	r22, r20
 574:	77 df       	rcall	.-274    	; 0x464 <setUBRR>
 576:	f7 01       	movw	r30, r14
 578:	95 83       	std	Z+5, r25	; 0x05
 57a:	84 83       	std	Z+4, r24	; 0x04
	serial_port[port]->ucsrc = framing;
 57c:	e8 81       	ld	r30, Y
 57e:	f9 81       	ldd	r31, Y+1	; 0x01
 580:	12 83       	std	Z+2, r17	; 0x02
	//enable the receiving
	//UCSRnB bit 4
	serial_port[port]->ucsrb |= (1 << 4);
 582:	e8 81       	ld	r30, Y
 584:	f9 81       	ldd	r31, Y+1	; 0x01
 586:	81 81       	ldd	r24, Z+1	; 0x01
 588:	80 61       	ori	r24, 0x10	; 16
 58a:	81 83       	std	Z+1, r24	; 0x01
	//enable the transmitting
	//UCSRnB bit 3
	serial_port[port]->ucsrb |= (1 << 3);
 58c:	e8 81       	ld	r30, Y
 58e:	f9 81       	ldd	r31, Y+1	; 0x01
 590:	81 81       	ldd	r24, Z+1	; 0x01
 592:	88 60       	ori	r24, 0x08	; 8
 594:	81 83       	std	Z+1, r24	; 0x01
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	08 95       	ret

000005a2 <sprintf>:
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	2e 97       	sbiw	r28, 0x0e	; 14
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	de bf       	out	0x3e, r29	; 62
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	cd bf       	out	0x3d, r28	; 61
 5ba:	0e 89       	ldd	r16, Y+22	; 0x16
 5bc:	1f 89       	ldd	r17, Y+23	; 0x17
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	8c 83       	std	Y+4, r24	; 0x04
 5c2:	1a 83       	std	Y+2, r17	; 0x02
 5c4:	09 83       	std	Y+1, r16	; 0x01
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	9f e7       	ldi	r25, 0x7F	; 127
 5ca:	9e 83       	std	Y+6, r25	; 0x06
 5cc:	8d 83       	std	Y+5, r24	; 0x05
 5ce:	ae 01       	movw	r20, r28
 5d0:	46 5e       	subi	r20, 0xE6	; 230
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	68 8d       	ldd	r22, Y+24	; 0x18
 5d6:	79 8d       	ldd	r23, Y+25	; 0x19
 5d8:	ce 01       	movw	r24, r28
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	10 d0       	rcall	.+32     	; 0x5fe <vfprintf>
 5de:	ef 81       	ldd	r30, Y+7	; 0x07
 5e0:	f8 85       	ldd	r31, Y+8	; 0x08
 5e2:	e0 0f       	add	r30, r16
 5e4:	f1 1f       	adc	r31, r17
 5e6:	10 82       	st	Z, r1
 5e8:	2e 96       	adiw	r28, 0x0e	; 14
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	08 95       	ret

000005fe <vfprintf>:
 5fe:	2f 92       	push	r2
 600:	3f 92       	push	r3
 602:	4f 92       	push	r4
 604:	5f 92       	push	r5
 606:	6f 92       	push	r6
 608:	7f 92       	push	r7
 60a:	8f 92       	push	r8
 60c:	9f 92       	push	r9
 60e:	af 92       	push	r10
 610:	bf 92       	push	r11
 612:	cf 92       	push	r12
 614:	df 92       	push	r13
 616:	ef 92       	push	r14
 618:	ff 92       	push	r15
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	2b 97       	sbiw	r28, 0x0b	; 11
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
 632:	6c 01       	movw	r12, r24
 634:	7b 01       	movw	r14, r22
 636:	8a 01       	movw	r16, r20
 638:	fc 01       	movw	r30, r24
 63a:	17 82       	std	Z+7, r1	; 0x07
 63c:	16 82       	std	Z+6, r1	; 0x06
 63e:	83 81       	ldd	r24, Z+3	; 0x03
 640:	81 ff       	sbrs	r24, 1
 642:	bf c1       	rjmp	.+894    	; 0x9c2 <vfprintf+0x3c4>
 644:	ce 01       	movw	r24, r28
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	3c 01       	movw	r6, r24
 64a:	f6 01       	movw	r30, r12
 64c:	93 81       	ldd	r25, Z+3	; 0x03
 64e:	f7 01       	movw	r30, r14
 650:	93 fd       	sbrc	r25, 3
 652:	85 91       	lpm	r24, Z+
 654:	93 ff       	sbrs	r25, 3
 656:	81 91       	ld	r24, Z+
 658:	7f 01       	movw	r14, r30
 65a:	88 23       	and	r24, r24
 65c:	09 f4       	brne	.+2      	; 0x660 <vfprintf+0x62>
 65e:	ad c1       	rjmp	.+858    	; 0x9ba <vfprintf+0x3bc>
 660:	85 32       	cpi	r24, 0x25	; 37
 662:	39 f4       	brne	.+14     	; 0x672 <vfprintf+0x74>
 664:	93 fd       	sbrc	r25, 3
 666:	85 91       	lpm	r24, Z+
 668:	93 ff       	sbrs	r25, 3
 66a:	81 91       	ld	r24, Z+
 66c:	7f 01       	movw	r14, r30
 66e:	85 32       	cpi	r24, 0x25	; 37
 670:	21 f4       	brne	.+8      	; 0x67a <vfprintf+0x7c>
 672:	b6 01       	movw	r22, r12
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	d6 d1       	rcall	.+940    	; 0xa24 <fputc>
 678:	e8 cf       	rjmp	.-48     	; 0x64a <vfprintf+0x4c>
 67a:	91 2c       	mov	r9, r1
 67c:	21 2c       	mov	r2, r1
 67e:	31 2c       	mov	r3, r1
 680:	ff e1       	ldi	r31, 0x1F	; 31
 682:	f3 15       	cp	r31, r3
 684:	d8 f0       	brcs	.+54     	; 0x6bc <vfprintf+0xbe>
 686:	8b 32       	cpi	r24, 0x2B	; 43
 688:	79 f0       	breq	.+30     	; 0x6a8 <vfprintf+0xaa>
 68a:	38 f4       	brcc	.+14     	; 0x69a <vfprintf+0x9c>
 68c:	80 32       	cpi	r24, 0x20	; 32
 68e:	79 f0       	breq	.+30     	; 0x6ae <vfprintf+0xb0>
 690:	83 32       	cpi	r24, 0x23	; 35
 692:	a1 f4       	brne	.+40     	; 0x6bc <vfprintf+0xbe>
 694:	23 2d       	mov	r18, r3
 696:	20 61       	ori	r18, 0x10	; 16
 698:	1d c0       	rjmp	.+58     	; 0x6d4 <vfprintf+0xd6>
 69a:	8d 32       	cpi	r24, 0x2D	; 45
 69c:	61 f0       	breq	.+24     	; 0x6b6 <vfprintf+0xb8>
 69e:	80 33       	cpi	r24, 0x30	; 48
 6a0:	69 f4       	brne	.+26     	; 0x6bc <vfprintf+0xbe>
 6a2:	23 2d       	mov	r18, r3
 6a4:	21 60       	ori	r18, 0x01	; 1
 6a6:	16 c0       	rjmp	.+44     	; 0x6d4 <vfprintf+0xd6>
 6a8:	83 2d       	mov	r24, r3
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	38 2e       	mov	r3, r24
 6ae:	e3 2d       	mov	r30, r3
 6b0:	e4 60       	ori	r30, 0x04	; 4
 6b2:	3e 2e       	mov	r3, r30
 6b4:	2a c0       	rjmp	.+84     	; 0x70a <vfprintf+0x10c>
 6b6:	f3 2d       	mov	r31, r3
 6b8:	f8 60       	ori	r31, 0x08	; 8
 6ba:	1d c0       	rjmp	.+58     	; 0x6f6 <vfprintf+0xf8>
 6bc:	37 fc       	sbrc	r3, 7
 6be:	2d c0       	rjmp	.+90     	; 0x71a <vfprintf+0x11c>
 6c0:	20 ed       	ldi	r18, 0xD0	; 208
 6c2:	28 0f       	add	r18, r24
 6c4:	2a 30       	cpi	r18, 0x0A	; 10
 6c6:	40 f0       	brcs	.+16     	; 0x6d8 <vfprintf+0xda>
 6c8:	8e 32       	cpi	r24, 0x2E	; 46
 6ca:	b9 f4       	brne	.+46     	; 0x6fa <vfprintf+0xfc>
 6cc:	36 fc       	sbrc	r3, 6
 6ce:	75 c1       	rjmp	.+746    	; 0x9ba <vfprintf+0x3bc>
 6d0:	23 2d       	mov	r18, r3
 6d2:	20 64       	ori	r18, 0x40	; 64
 6d4:	32 2e       	mov	r3, r18
 6d6:	19 c0       	rjmp	.+50     	; 0x70a <vfprintf+0x10c>
 6d8:	36 fe       	sbrs	r3, 6
 6da:	06 c0       	rjmp	.+12     	; 0x6e8 <vfprintf+0xea>
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	98 9e       	mul	r9, r24
 6e0:	20 0d       	add	r18, r0
 6e2:	11 24       	eor	r1, r1
 6e4:	92 2e       	mov	r9, r18
 6e6:	11 c0       	rjmp	.+34     	; 0x70a <vfprintf+0x10c>
 6e8:	ea e0       	ldi	r30, 0x0A	; 10
 6ea:	2e 9e       	mul	r2, r30
 6ec:	20 0d       	add	r18, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	22 2e       	mov	r2, r18
 6f2:	f3 2d       	mov	r31, r3
 6f4:	f0 62       	ori	r31, 0x20	; 32
 6f6:	3f 2e       	mov	r3, r31
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <vfprintf+0x10c>
 6fa:	8c 36       	cpi	r24, 0x6C	; 108
 6fc:	21 f4       	brne	.+8      	; 0x706 <vfprintf+0x108>
 6fe:	83 2d       	mov	r24, r3
 700:	80 68       	ori	r24, 0x80	; 128
 702:	38 2e       	mov	r3, r24
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x10c>
 706:	88 36       	cpi	r24, 0x68	; 104
 708:	41 f4       	brne	.+16     	; 0x71a <vfprintf+0x11c>
 70a:	f7 01       	movw	r30, r14
 70c:	93 fd       	sbrc	r25, 3
 70e:	85 91       	lpm	r24, Z+
 710:	93 ff       	sbrs	r25, 3
 712:	81 91       	ld	r24, Z+
 714:	7f 01       	movw	r14, r30
 716:	81 11       	cpse	r24, r1
 718:	b3 cf       	rjmp	.-154    	; 0x680 <vfprintf+0x82>
 71a:	98 2f       	mov	r25, r24
 71c:	9f 7d       	andi	r25, 0xDF	; 223
 71e:	95 54       	subi	r25, 0x45	; 69
 720:	93 30       	cpi	r25, 0x03	; 3
 722:	28 f4       	brcc	.+10     	; 0x72e <vfprintf+0x130>
 724:	0c 5f       	subi	r16, 0xFC	; 252
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	9f e3       	ldi	r25, 0x3F	; 63
 72a:	99 83       	std	Y+1, r25	; 0x01
 72c:	0d c0       	rjmp	.+26     	; 0x748 <vfprintf+0x14a>
 72e:	83 36       	cpi	r24, 0x63	; 99
 730:	31 f0       	breq	.+12     	; 0x73e <vfprintf+0x140>
 732:	83 37       	cpi	r24, 0x73	; 115
 734:	71 f0       	breq	.+28     	; 0x752 <vfprintf+0x154>
 736:	83 35       	cpi	r24, 0x53	; 83
 738:	09 f0       	breq	.+2      	; 0x73c <vfprintf+0x13e>
 73a:	55 c0       	rjmp	.+170    	; 0x7e6 <vfprintf+0x1e8>
 73c:	20 c0       	rjmp	.+64     	; 0x77e <vfprintf+0x180>
 73e:	f8 01       	movw	r30, r16
 740:	80 81       	ld	r24, Z
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	0e 5f       	subi	r16, 0xFE	; 254
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	88 24       	eor	r8, r8
 74a:	83 94       	inc	r8
 74c:	91 2c       	mov	r9, r1
 74e:	53 01       	movw	r10, r6
 750:	12 c0       	rjmp	.+36     	; 0x776 <vfprintf+0x178>
 752:	28 01       	movw	r4, r16
 754:	f2 e0       	ldi	r31, 0x02	; 2
 756:	4f 0e       	add	r4, r31
 758:	51 1c       	adc	r5, r1
 75a:	f8 01       	movw	r30, r16
 75c:	a0 80       	ld	r10, Z
 75e:	b1 80       	ldd	r11, Z+1	; 0x01
 760:	36 fe       	sbrs	r3, 6
 762:	03 c0       	rjmp	.+6      	; 0x76a <vfprintf+0x16c>
 764:	69 2d       	mov	r22, r9
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <vfprintf+0x170>
 76a:	6f ef       	ldi	r22, 0xFF	; 255
 76c:	7f ef       	ldi	r23, 0xFF	; 255
 76e:	c5 01       	movw	r24, r10
 770:	4e d1       	rcall	.+668    	; 0xa0e <strnlen>
 772:	4c 01       	movw	r8, r24
 774:	82 01       	movw	r16, r4
 776:	f3 2d       	mov	r31, r3
 778:	ff 77       	andi	r31, 0x7F	; 127
 77a:	3f 2e       	mov	r3, r31
 77c:	15 c0       	rjmp	.+42     	; 0x7a8 <vfprintf+0x1aa>
 77e:	28 01       	movw	r4, r16
 780:	22 e0       	ldi	r18, 0x02	; 2
 782:	42 0e       	add	r4, r18
 784:	51 1c       	adc	r5, r1
 786:	f8 01       	movw	r30, r16
 788:	a0 80       	ld	r10, Z
 78a:	b1 80       	ldd	r11, Z+1	; 0x01
 78c:	36 fe       	sbrs	r3, 6
 78e:	03 c0       	rjmp	.+6      	; 0x796 <vfprintf+0x198>
 790:	69 2d       	mov	r22, r9
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x19c>
 796:	6f ef       	ldi	r22, 0xFF	; 255
 798:	7f ef       	ldi	r23, 0xFF	; 255
 79a:	c5 01       	movw	r24, r10
 79c:	2d d1       	rcall	.+602    	; 0x9f8 <strnlen_P>
 79e:	4c 01       	movw	r8, r24
 7a0:	f3 2d       	mov	r31, r3
 7a2:	f0 68       	ori	r31, 0x80	; 128
 7a4:	3f 2e       	mov	r3, r31
 7a6:	82 01       	movw	r16, r4
 7a8:	33 fc       	sbrc	r3, 3
 7aa:	19 c0       	rjmp	.+50     	; 0x7de <vfprintf+0x1e0>
 7ac:	82 2d       	mov	r24, r2
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	88 16       	cp	r8, r24
 7b2:	99 06       	cpc	r9, r25
 7b4:	a0 f4       	brcc	.+40     	; 0x7de <vfprintf+0x1e0>
 7b6:	b6 01       	movw	r22, r12
 7b8:	80 e2       	ldi	r24, 0x20	; 32
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	33 d1       	rcall	.+614    	; 0xa24 <fputc>
 7be:	2a 94       	dec	r2
 7c0:	f5 cf       	rjmp	.-22     	; 0x7ac <vfprintf+0x1ae>
 7c2:	f5 01       	movw	r30, r10
 7c4:	37 fc       	sbrc	r3, 7
 7c6:	85 91       	lpm	r24, Z+
 7c8:	37 fe       	sbrs	r3, 7
 7ca:	81 91       	ld	r24, Z+
 7cc:	5f 01       	movw	r10, r30
 7ce:	b6 01       	movw	r22, r12
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	28 d1       	rcall	.+592    	; 0xa24 <fputc>
 7d4:	21 10       	cpse	r2, r1
 7d6:	2a 94       	dec	r2
 7d8:	21 e0       	ldi	r18, 0x01	; 1
 7da:	82 1a       	sub	r8, r18
 7dc:	91 08       	sbc	r9, r1
 7de:	81 14       	cp	r8, r1
 7e0:	91 04       	cpc	r9, r1
 7e2:	79 f7       	brne	.-34     	; 0x7c2 <vfprintf+0x1c4>
 7e4:	e1 c0       	rjmp	.+450    	; 0x9a8 <vfprintf+0x3aa>
 7e6:	84 36       	cpi	r24, 0x64	; 100
 7e8:	11 f0       	breq	.+4      	; 0x7ee <vfprintf+0x1f0>
 7ea:	89 36       	cpi	r24, 0x69	; 105
 7ec:	39 f5       	brne	.+78     	; 0x83c <vfprintf+0x23e>
 7ee:	f8 01       	movw	r30, r16
 7f0:	37 fe       	sbrs	r3, 7
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <vfprintf+0x204>
 7f4:	60 81       	ld	r22, Z
 7f6:	71 81       	ldd	r23, Z+1	; 0x01
 7f8:	82 81       	ldd	r24, Z+2	; 0x02
 7fa:	93 81       	ldd	r25, Z+3	; 0x03
 7fc:	0c 5f       	subi	r16, 0xFC	; 252
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	08 c0       	rjmp	.+16     	; 0x812 <vfprintf+0x214>
 802:	60 81       	ld	r22, Z
 804:	71 81       	ldd	r23, Z+1	; 0x01
 806:	07 2e       	mov	r0, r23
 808:	00 0c       	add	r0, r0
 80a:	88 0b       	sbc	r24, r24
 80c:	99 0b       	sbc	r25, r25
 80e:	0e 5f       	subi	r16, 0xFE	; 254
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	f3 2d       	mov	r31, r3
 814:	ff 76       	andi	r31, 0x6F	; 111
 816:	3f 2e       	mov	r3, r31
 818:	97 ff       	sbrs	r25, 7
 81a:	09 c0       	rjmp	.+18     	; 0x82e <vfprintf+0x230>
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	f0 68       	ori	r31, 0x80	; 128
 82c:	3f 2e       	mov	r3, r31
 82e:	2a e0       	ldi	r18, 0x0A	; 10
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	a3 01       	movw	r20, r6
 834:	33 d1       	rcall	.+614    	; 0xa9c <__ultoa_invert>
 836:	88 2e       	mov	r8, r24
 838:	86 18       	sub	r8, r6
 83a:	44 c0       	rjmp	.+136    	; 0x8c4 <vfprintf+0x2c6>
 83c:	85 37       	cpi	r24, 0x75	; 117
 83e:	31 f4       	brne	.+12     	; 0x84c <vfprintf+0x24e>
 840:	23 2d       	mov	r18, r3
 842:	2f 7e       	andi	r18, 0xEF	; 239
 844:	b2 2e       	mov	r11, r18
 846:	2a e0       	ldi	r18, 0x0A	; 10
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	25 c0       	rjmp	.+74     	; 0x896 <vfprintf+0x298>
 84c:	93 2d       	mov	r25, r3
 84e:	99 7f       	andi	r25, 0xF9	; 249
 850:	b9 2e       	mov	r11, r25
 852:	8f 36       	cpi	r24, 0x6F	; 111
 854:	c1 f0       	breq	.+48     	; 0x886 <vfprintf+0x288>
 856:	18 f4       	brcc	.+6      	; 0x85e <vfprintf+0x260>
 858:	88 35       	cpi	r24, 0x58	; 88
 85a:	79 f0       	breq	.+30     	; 0x87a <vfprintf+0x27c>
 85c:	ae c0       	rjmp	.+348    	; 0x9ba <vfprintf+0x3bc>
 85e:	80 37       	cpi	r24, 0x70	; 112
 860:	19 f0       	breq	.+6      	; 0x868 <vfprintf+0x26a>
 862:	88 37       	cpi	r24, 0x78	; 120
 864:	21 f0       	breq	.+8      	; 0x86e <vfprintf+0x270>
 866:	a9 c0       	rjmp	.+338    	; 0x9ba <vfprintf+0x3bc>
 868:	e9 2f       	mov	r30, r25
 86a:	e0 61       	ori	r30, 0x10	; 16
 86c:	be 2e       	mov	r11, r30
 86e:	b4 fe       	sbrs	r11, 4
 870:	0d c0       	rjmp	.+26     	; 0x88c <vfprintf+0x28e>
 872:	fb 2d       	mov	r31, r11
 874:	f4 60       	ori	r31, 0x04	; 4
 876:	bf 2e       	mov	r11, r31
 878:	09 c0       	rjmp	.+18     	; 0x88c <vfprintf+0x28e>
 87a:	34 fe       	sbrs	r3, 4
 87c:	0a c0       	rjmp	.+20     	; 0x892 <vfprintf+0x294>
 87e:	29 2f       	mov	r18, r25
 880:	26 60       	ori	r18, 0x06	; 6
 882:	b2 2e       	mov	r11, r18
 884:	06 c0       	rjmp	.+12     	; 0x892 <vfprintf+0x294>
 886:	28 e0       	ldi	r18, 0x08	; 8
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	05 c0       	rjmp	.+10     	; 0x896 <vfprintf+0x298>
 88c:	20 e1       	ldi	r18, 0x10	; 16
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x298>
 892:	20 e1       	ldi	r18, 0x10	; 16
 894:	32 e0       	ldi	r19, 0x02	; 2
 896:	f8 01       	movw	r30, r16
 898:	b7 fe       	sbrs	r11, 7
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <vfprintf+0x2ac>
 89c:	60 81       	ld	r22, Z
 89e:	71 81       	ldd	r23, Z+1	; 0x01
 8a0:	82 81       	ldd	r24, Z+2	; 0x02
 8a2:	93 81       	ldd	r25, Z+3	; 0x03
 8a4:	0c 5f       	subi	r16, 0xFC	; 252
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0x2b8>
 8aa:	60 81       	ld	r22, Z
 8ac:	71 81       	ldd	r23, Z+1	; 0x01
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 5f       	subi	r16, 0xFE	; 254
 8b4:	1f 4f       	sbci	r17, 0xFF	; 255
 8b6:	a3 01       	movw	r20, r6
 8b8:	f1 d0       	rcall	.+482    	; 0xa9c <__ultoa_invert>
 8ba:	88 2e       	mov	r8, r24
 8bc:	86 18       	sub	r8, r6
 8be:	fb 2d       	mov	r31, r11
 8c0:	ff 77       	andi	r31, 0x7F	; 127
 8c2:	3f 2e       	mov	r3, r31
 8c4:	36 fe       	sbrs	r3, 6
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x2e4>
 8c8:	23 2d       	mov	r18, r3
 8ca:	2e 7f       	andi	r18, 0xFE	; 254
 8cc:	a2 2e       	mov	r10, r18
 8ce:	89 14       	cp	r8, r9
 8d0:	58 f4       	brcc	.+22     	; 0x8e8 <vfprintf+0x2ea>
 8d2:	34 fe       	sbrs	r3, 4
 8d4:	0b c0       	rjmp	.+22     	; 0x8ec <vfprintf+0x2ee>
 8d6:	32 fc       	sbrc	r3, 2
 8d8:	09 c0       	rjmp	.+18     	; 0x8ec <vfprintf+0x2ee>
 8da:	83 2d       	mov	r24, r3
 8dc:	8e 7e       	andi	r24, 0xEE	; 238
 8de:	a8 2e       	mov	r10, r24
 8e0:	05 c0       	rjmp	.+10     	; 0x8ec <vfprintf+0x2ee>
 8e2:	b8 2c       	mov	r11, r8
 8e4:	a3 2c       	mov	r10, r3
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <vfprintf+0x2f0>
 8e8:	b8 2c       	mov	r11, r8
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <vfprintf+0x2f0>
 8ec:	b9 2c       	mov	r11, r9
 8ee:	a4 fe       	sbrs	r10, 4
 8f0:	0f c0       	rjmp	.+30     	; 0x910 <vfprintf+0x312>
 8f2:	fe 01       	movw	r30, r28
 8f4:	e8 0d       	add	r30, r8
 8f6:	f1 1d       	adc	r31, r1
 8f8:	80 81       	ld	r24, Z
 8fa:	80 33       	cpi	r24, 0x30	; 48
 8fc:	21 f4       	brne	.+8      	; 0x906 <vfprintf+0x308>
 8fe:	9a 2d       	mov	r25, r10
 900:	99 7e       	andi	r25, 0xE9	; 233
 902:	a9 2e       	mov	r10, r25
 904:	09 c0       	rjmp	.+18     	; 0x918 <vfprintf+0x31a>
 906:	a2 fe       	sbrs	r10, 2
 908:	06 c0       	rjmp	.+12     	; 0x916 <vfprintf+0x318>
 90a:	b3 94       	inc	r11
 90c:	b3 94       	inc	r11
 90e:	04 c0       	rjmp	.+8      	; 0x918 <vfprintf+0x31a>
 910:	8a 2d       	mov	r24, r10
 912:	86 78       	andi	r24, 0x86	; 134
 914:	09 f0       	breq	.+2      	; 0x918 <vfprintf+0x31a>
 916:	b3 94       	inc	r11
 918:	a3 fc       	sbrc	r10, 3
 91a:	10 c0       	rjmp	.+32     	; 0x93c <vfprintf+0x33e>
 91c:	a0 fe       	sbrs	r10, 0
 91e:	06 c0       	rjmp	.+12     	; 0x92c <vfprintf+0x32e>
 920:	b2 14       	cp	r11, r2
 922:	80 f4       	brcc	.+32     	; 0x944 <vfprintf+0x346>
 924:	28 0c       	add	r2, r8
 926:	92 2c       	mov	r9, r2
 928:	9b 18       	sub	r9, r11
 92a:	0d c0       	rjmp	.+26     	; 0x946 <vfprintf+0x348>
 92c:	b2 14       	cp	r11, r2
 92e:	58 f4       	brcc	.+22     	; 0x946 <vfprintf+0x348>
 930:	b6 01       	movw	r22, r12
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	76 d0       	rcall	.+236    	; 0xa24 <fputc>
 938:	b3 94       	inc	r11
 93a:	f8 cf       	rjmp	.-16     	; 0x92c <vfprintf+0x32e>
 93c:	b2 14       	cp	r11, r2
 93e:	18 f4       	brcc	.+6      	; 0x946 <vfprintf+0x348>
 940:	2b 18       	sub	r2, r11
 942:	02 c0       	rjmp	.+4      	; 0x948 <vfprintf+0x34a>
 944:	98 2c       	mov	r9, r8
 946:	21 2c       	mov	r2, r1
 948:	a4 fe       	sbrs	r10, 4
 94a:	0f c0       	rjmp	.+30     	; 0x96a <vfprintf+0x36c>
 94c:	b6 01       	movw	r22, r12
 94e:	80 e3       	ldi	r24, 0x30	; 48
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	68 d0       	rcall	.+208    	; 0xa24 <fputc>
 954:	a2 fe       	sbrs	r10, 2
 956:	16 c0       	rjmp	.+44     	; 0x984 <vfprintf+0x386>
 958:	a1 fc       	sbrc	r10, 1
 95a:	03 c0       	rjmp	.+6      	; 0x962 <vfprintf+0x364>
 95c:	88 e7       	ldi	r24, 0x78	; 120
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <vfprintf+0x368>
 962:	88 e5       	ldi	r24, 0x58	; 88
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	b6 01       	movw	r22, r12
 968:	0c c0       	rjmp	.+24     	; 0x982 <vfprintf+0x384>
 96a:	8a 2d       	mov	r24, r10
 96c:	86 78       	andi	r24, 0x86	; 134
 96e:	51 f0       	breq	.+20     	; 0x984 <vfprintf+0x386>
 970:	a1 fe       	sbrs	r10, 1
 972:	02 c0       	rjmp	.+4      	; 0x978 <vfprintf+0x37a>
 974:	8b e2       	ldi	r24, 0x2B	; 43
 976:	01 c0       	rjmp	.+2      	; 0x97a <vfprintf+0x37c>
 978:	80 e2       	ldi	r24, 0x20	; 32
 97a:	a7 fc       	sbrc	r10, 7
 97c:	8d e2       	ldi	r24, 0x2D	; 45
 97e:	b6 01       	movw	r22, r12
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	50 d0       	rcall	.+160    	; 0xa24 <fputc>
 984:	89 14       	cp	r8, r9
 986:	30 f4       	brcc	.+12     	; 0x994 <vfprintf+0x396>
 988:	b6 01       	movw	r22, r12
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	4a d0       	rcall	.+148    	; 0xa24 <fputc>
 990:	9a 94       	dec	r9
 992:	f8 cf       	rjmp	.-16     	; 0x984 <vfprintf+0x386>
 994:	8a 94       	dec	r8
 996:	f3 01       	movw	r30, r6
 998:	e8 0d       	add	r30, r8
 99a:	f1 1d       	adc	r31, r1
 99c:	80 81       	ld	r24, Z
 99e:	b6 01       	movw	r22, r12
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	40 d0       	rcall	.+128    	; 0xa24 <fputc>
 9a4:	81 10       	cpse	r8, r1
 9a6:	f6 cf       	rjmp	.-20     	; 0x994 <vfprintf+0x396>
 9a8:	22 20       	and	r2, r2
 9aa:	09 f4       	brne	.+2      	; 0x9ae <vfprintf+0x3b0>
 9ac:	4e ce       	rjmp	.-868    	; 0x64a <vfprintf+0x4c>
 9ae:	b6 01       	movw	r22, r12
 9b0:	80 e2       	ldi	r24, 0x20	; 32
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	37 d0       	rcall	.+110    	; 0xa24 <fputc>
 9b6:	2a 94       	dec	r2
 9b8:	f7 cf       	rjmp	.-18     	; 0x9a8 <vfprintf+0x3aa>
 9ba:	f6 01       	movw	r30, r12
 9bc:	86 81       	ldd	r24, Z+6	; 0x06
 9be:	97 81       	ldd	r25, Z+7	; 0x07
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <vfprintf+0x3c8>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	9f ef       	ldi	r25, 0xFF	; 255
 9c6:	2b 96       	adiw	r28, 0x0b	; 11
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	ff 90       	pop	r15
 9dc:	ef 90       	pop	r14
 9de:	df 90       	pop	r13
 9e0:	cf 90       	pop	r12
 9e2:	bf 90       	pop	r11
 9e4:	af 90       	pop	r10
 9e6:	9f 90       	pop	r9
 9e8:	8f 90       	pop	r8
 9ea:	7f 90       	pop	r7
 9ec:	6f 90       	pop	r6
 9ee:	5f 90       	pop	r5
 9f0:	4f 90       	pop	r4
 9f2:	3f 90       	pop	r3
 9f4:	2f 90       	pop	r2
 9f6:	08 95       	ret

000009f8 <strnlen_P>:
 9f8:	fc 01       	movw	r30, r24
 9fa:	05 90       	lpm	r0, Z+
 9fc:	61 50       	subi	r22, 0x01	; 1
 9fe:	70 40       	sbci	r23, 0x00	; 0
 a00:	01 10       	cpse	r0, r1
 a02:	d8 f7       	brcc	.-10     	; 0x9fa <strnlen_P+0x2>
 a04:	80 95       	com	r24
 a06:	90 95       	com	r25
 a08:	8e 0f       	add	r24, r30
 a0a:	9f 1f       	adc	r25, r31
 a0c:	08 95       	ret

00000a0e <strnlen>:
 a0e:	fc 01       	movw	r30, r24
 a10:	61 50       	subi	r22, 0x01	; 1
 a12:	70 40       	sbci	r23, 0x00	; 0
 a14:	01 90       	ld	r0, Z+
 a16:	01 10       	cpse	r0, r1
 a18:	d8 f7       	brcc	.-10     	; 0xa10 <strnlen+0x2>
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	8e 0f       	add	r24, r30
 a20:	9f 1f       	adc	r25, r31
 a22:	08 95       	ret

00000a24 <fputc>:
 a24:	0f 93       	push	r16
 a26:	1f 93       	push	r17
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	fb 01       	movw	r30, r22
 a2e:	23 81       	ldd	r18, Z+3	; 0x03
 a30:	21 fd       	sbrc	r18, 1
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <fputc+0x16>
 a34:	8f ef       	ldi	r24, 0xFF	; 255
 a36:	9f ef       	ldi	r25, 0xFF	; 255
 a38:	2c c0       	rjmp	.+88     	; 0xa92 <fputc+0x6e>
 a3a:	22 ff       	sbrs	r18, 2
 a3c:	16 c0       	rjmp	.+44     	; 0xa6a <fputc+0x46>
 a3e:	46 81       	ldd	r20, Z+6	; 0x06
 a40:	57 81       	ldd	r21, Z+7	; 0x07
 a42:	24 81       	ldd	r18, Z+4	; 0x04
 a44:	35 81       	ldd	r19, Z+5	; 0x05
 a46:	42 17       	cp	r20, r18
 a48:	53 07       	cpc	r21, r19
 a4a:	44 f4       	brge	.+16     	; 0xa5c <fputc+0x38>
 a4c:	a0 81       	ld	r26, Z
 a4e:	b1 81       	ldd	r27, Z+1	; 0x01
 a50:	9d 01       	movw	r18, r26
 a52:	2f 5f       	subi	r18, 0xFF	; 255
 a54:	3f 4f       	sbci	r19, 0xFF	; 255
 a56:	31 83       	std	Z+1, r19	; 0x01
 a58:	20 83       	st	Z, r18
 a5a:	8c 93       	st	X, r24
 a5c:	26 81       	ldd	r18, Z+6	; 0x06
 a5e:	37 81       	ldd	r19, Z+7	; 0x07
 a60:	2f 5f       	subi	r18, 0xFF	; 255
 a62:	3f 4f       	sbci	r19, 0xFF	; 255
 a64:	37 83       	std	Z+7, r19	; 0x07
 a66:	26 83       	std	Z+6, r18	; 0x06
 a68:	14 c0       	rjmp	.+40     	; 0xa92 <fputc+0x6e>
 a6a:	8b 01       	movw	r16, r22
 a6c:	ec 01       	movw	r28, r24
 a6e:	fb 01       	movw	r30, r22
 a70:	00 84       	ldd	r0, Z+8	; 0x08
 a72:	f1 85       	ldd	r31, Z+9	; 0x09
 a74:	e0 2d       	mov	r30, r0
 a76:	19 95       	eicall
 a78:	89 2b       	or	r24, r25
 a7a:	e1 f6       	brne	.-72     	; 0xa34 <fputc+0x10>
 a7c:	d8 01       	movw	r26, r16
 a7e:	16 96       	adiw	r26, 0x06	; 6
 a80:	8d 91       	ld	r24, X+
 a82:	9c 91       	ld	r25, X
 a84:	17 97       	sbiw	r26, 0x07	; 7
 a86:	01 96       	adiw	r24, 0x01	; 1
 a88:	17 96       	adiw	r26, 0x07	; 7
 a8a:	9c 93       	st	X, r25
 a8c:	8e 93       	st	-X, r24
 a8e:	16 97       	sbiw	r26, 0x06	; 6
 a90:	ce 01       	movw	r24, r28
 a92:	df 91       	pop	r29
 a94:	cf 91       	pop	r28
 a96:	1f 91       	pop	r17
 a98:	0f 91       	pop	r16
 a9a:	08 95       	ret

00000a9c <__ultoa_invert>:
 a9c:	fa 01       	movw	r30, r20
 a9e:	aa 27       	eor	r26, r26
 aa0:	28 30       	cpi	r18, 0x08	; 8
 aa2:	51 f1       	breq	.+84     	; 0xaf8 <__ultoa_invert+0x5c>
 aa4:	20 31       	cpi	r18, 0x10	; 16
 aa6:	81 f1       	breq	.+96     	; 0xb08 <__ultoa_invert+0x6c>
 aa8:	e8 94       	clt
 aaa:	6f 93       	push	r22
 aac:	6e 7f       	andi	r22, 0xFE	; 254
 aae:	6e 5f       	subi	r22, 0xFE	; 254
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	af 4f       	sbci	r26, 0xFF	; 255
 ab8:	b1 e0       	ldi	r27, 0x01	; 1
 aba:	3e d0       	rcall	.+124    	; 0xb38 <__ultoa_invert+0x9c>
 abc:	b4 e0       	ldi	r27, 0x04	; 4
 abe:	3c d0       	rcall	.+120    	; 0xb38 <__ultoa_invert+0x9c>
 ac0:	67 0f       	add	r22, r23
 ac2:	78 1f       	adc	r23, r24
 ac4:	89 1f       	adc	r24, r25
 ac6:	9a 1f       	adc	r25, r26
 ac8:	a1 1d       	adc	r26, r1
 aca:	68 0f       	add	r22, r24
 acc:	79 1f       	adc	r23, r25
 ace:	8a 1f       	adc	r24, r26
 ad0:	91 1d       	adc	r25, r1
 ad2:	a1 1d       	adc	r26, r1
 ad4:	6a 0f       	add	r22, r26
 ad6:	71 1d       	adc	r23, r1
 ad8:	81 1d       	adc	r24, r1
 ada:	91 1d       	adc	r25, r1
 adc:	a1 1d       	adc	r26, r1
 ade:	20 d0       	rcall	.+64     	; 0xb20 <__ultoa_invert+0x84>
 ae0:	09 f4       	brne	.+2      	; 0xae4 <__ultoa_invert+0x48>
 ae2:	68 94       	set
 ae4:	3f 91       	pop	r19
 ae6:	2a e0       	ldi	r18, 0x0A	; 10
 ae8:	26 9f       	mul	r18, r22
 aea:	11 24       	eor	r1, r1
 aec:	30 19       	sub	r19, r0
 aee:	30 5d       	subi	r19, 0xD0	; 208
 af0:	31 93       	st	Z+, r19
 af2:	de f6       	brtc	.-74     	; 0xaaa <__ultoa_invert+0xe>
 af4:	cf 01       	movw	r24, r30
 af6:	08 95       	ret
 af8:	46 2f       	mov	r20, r22
 afa:	47 70       	andi	r20, 0x07	; 7
 afc:	40 5d       	subi	r20, 0xD0	; 208
 afe:	41 93       	st	Z+, r20
 b00:	b3 e0       	ldi	r27, 0x03	; 3
 b02:	0f d0       	rcall	.+30     	; 0xb22 <__ultoa_invert+0x86>
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__ultoa_invert+0x5c>
 b06:	f6 cf       	rjmp	.-20     	; 0xaf4 <__ultoa_invert+0x58>
 b08:	46 2f       	mov	r20, r22
 b0a:	4f 70       	andi	r20, 0x0F	; 15
 b0c:	40 5d       	subi	r20, 0xD0	; 208
 b0e:	4a 33       	cpi	r20, 0x3A	; 58
 b10:	18 f0       	brcs	.+6      	; 0xb18 <__ultoa_invert+0x7c>
 b12:	49 5d       	subi	r20, 0xD9	; 217
 b14:	31 fd       	sbrc	r19, 1
 b16:	40 52       	subi	r20, 0x20	; 32
 b18:	41 93       	st	Z+, r20
 b1a:	02 d0       	rcall	.+4      	; 0xb20 <__ultoa_invert+0x84>
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__ultoa_invert+0x6c>
 b1e:	ea cf       	rjmp	.-44     	; 0xaf4 <__ultoa_invert+0x58>
 b20:	b4 e0       	ldi	r27, 0x04	; 4
 b22:	a6 95       	lsr	r26
 b24:	97 95       	ror	r25
 b26:	87 95       	ror	r24
 b28:	77 95       	ror	r23
 b2a:	67 95       	ror	r22
 b2c:	ba 95       	dec	r27
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__ultoa_invert+0x86>
 b30:	00 97       	sbiw	r24, 0x00	; 0
 b32:	61 05       	cpc	r22, r1
 b34:	71 05       	cpc	r23, r1
 b36:	08 95       	ret
 b38:	9b 01       	movw	r18, r22
 b3a:	ac 01       	movw	r20, r24
 b3c:	0a 2e       	mov	r0, r26
 b3e:	06 94       	lsr	r0
 b40:	57 95       	ror	r21
 b42:	47 95       	ror	r20
 b44:	37 95       	ror	r19
 b46:	27 95       	ror	r18
 b48:	ba 95       	dec	r27
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0xa2>
 b4c:	62 0f       	add	r22, r18
 b4e:	73 1f       	adc	r23, r19
 b50:	84 1f       	adc	r24, r20
 b52:	95 1f       	adc	r25, r21
 b54:	a0 1d       	adc	r26, r0
 b56:	08 95       	ret

00000b58 <_exit>:
 b58:	f8 94       	cli

00000b5a <__stop_program>:
 b5a:	ff cf       	rjmp	.-2      	; 0xb5a <__stop_program>
